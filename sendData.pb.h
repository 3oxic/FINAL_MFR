// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sendData.proto

#ifndef PROTOBUF_INCLUDED_sendData_2eproto
#define PROTOBUF_INCLUDED_sendData_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sendData_2eproto 

namespace protobuf_sendData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sendData_2eproto
namespace sendData {
class clientPacket;
class clientPacketDefaultTypeInternal;
extern clientPacketDefaultTypeInternal _clientPacket_default_instance_;
class serverPacket;
class serverPacketDefaultTypeInternal;
extern serverPacketDefaultTypeInternal _serverPacket_default_instance_;
}  // namespace sendData
namespace google {
namespace protobuf {
template<> ::sendData::clientPacket* Arena::CreateMaybeMessage<::sendData::clientPacket>(Arena*);
template<> ::sendData::serverPacket* Arena::CreateMaybeMessage<::sendData::serverPacket>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace sendData {

// ===================================================================

class clientPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sendData.clientPacket) */ {
 public:
  clientPacket();
  virtual ~clientPacket();

  clientPacket(const clientPacket& from);

  inline clientPacket& operator=(const clientPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  clientPacket(clientPacket&& from) noexcept
    : clientPacket() {
    *this = ::std::move(from);
  }

  inline clientPacket& operator=(clientPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const clientPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const clientPacket* internal_default_instance() {
    return reinterpret_cast<const clientPacket*>(
               &_clientPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(clientPacket* other);
  friend void swap(clientPacket& a, clientPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline clientPacket* New() const final {
    return CreateMaybeMessage<clientPacket>(NULL);
  }

  clientPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<clientPacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const clientPacket& from);
  void MergeFrom(const clientPacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(clientPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string packetType = 1;
  void clear_packettype();
  static const int kPacketTypeFieldNumber = 1;
  const ::std::string& packettype() const;
  void set_packettype(const ::std::string& value);
  #if LANG_CXX11
  void set_packettype(::std::string&& value);
  #endif
  void set_packettype(const char* value);
  void set_packettype(const char* value, size_t size);
  ::std::string* mutable_packettype();
  ::std::string* release_packettype();
  void set_allocated_packettype(::std::string* packettype);

  // bytes byteString = 2;
  void clear_bytestring();
  static const int kByteStringFieldNumber = 2;
  const ::std::string& bytestring() const;
  void set_bytestring(const ::std::string& value);
  #if LANG_CXX11
  void set_bytestring(::std::string&& value);
  #endif
  void set_bytestring(const char* value);
  void set_bytestring(const void* value, size_t size);
  ::std::string* mutable_bytestring();
  ::std::string* release_bytestring();
  void set_allocated_bytestring(::std::string* bytestring);

  // int32 sizeOf = 3;
  void clear_sizeof_();
  static const int kSizeOfFieldNumber = 3;
  ::google::protobuf::int32 sizeof_() const;
  void set_sizeof_(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sendData.clientPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr packettype_;
  ::google::protobuf::internal::ArenaStringPtr bytestring_;
  ::google::protobuf::int32 sizeof__;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sendData_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class serverPacket : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sendData.serverPacket) */ {
 public:
  serverPacket();
  virtual ~serverPacket();

  serverPacket(const serverPacket& from);

  inline serverPacket& operator=(const serverPacket& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  serverPacket(serverPacket&& from) noexcept
    : serverPacket() {
    *this = ::std::move(from);
  }

  inline serverPacket& operator=(serverPacket&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const serverPacket& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const serverPacket* internal_default_instance() {
    return reinterpret_cast<const serverPacket*>(
               &_serverPacket_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(serverPacket* other);
  friend void swap(serverPacket& a, serverPacket& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline serverPacket* New() const final {
    return CreateMaybeMessage<serverPacket>(NULL);
  }

  serverPacket* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<serverPacket>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const serverPacket& from);
  void MergeFrom(const serverPacket& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(serverPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string packetType = 1;
  void clear_packettype();
  static const int kPacketTypeFieldNumber = 1;
  const ::std::string& packettype() const;
  void set_packettype(const ::std::string& value);
  #if LANG_CXX11
  void set_packettype(::std::string&& value);
  #endif
  void set_packettype(const char* value);
  void set_packettype(const char* value, size_t size);
  ::std::string* mutable_packettype();
  ::std::string* release_packettype();
  void set_allocated_packettype(::std::string* packettype);

  // bytes byteString = 2;
  void clear_bytestring();
  static const int kByteStringFieldNumber = 2;
  const ::std::string& bytestring() const;
  void set_bytestring(const ::std::string& value);
  #if LANG_CXX11
  void set_bytestring(::std::string&& value);
  #endif
  void set_bytestring(const char* value);
  void set_bytestring(const void* value, size_t size);
  ::std::string* mutable_bytestring();
  ::std::string* release_bytestring();
  void set_allocated_bytestring(::std::string* bytestring);

  // int32 singleElementSize = 3;
  void clear_singleelementsize();
  static const int kSingleElementSizeFieldNumber = 3;
  ::google::protobuf::int32 singleelementsize() const;
  void set_singleelementsize(::google::protobuf::int32 value);

  // int32 totalSize = 4;
  void clear_totalsize();
  static const int kTotalSizeFieldNumber = 4;
  ::google::protobuf::int32 totalsize() const;
  void set_totalsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sendData.serverPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr packettype_;
  ::google::protobuf::internal::ArenaStringPtr bytestring_;
  ::google::protobuf::int32 singleelementsize_;
  ::google::protobuf::int32 totalsize_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_sendData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// clientPacket

// string packetType = 1;
inline void clientPacket::clear_packettype() {
  packettype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& clientPacket::packettype() const {
  // @@protoc_insertion_point(field_get:sendData.clientPacket.packetType)
  return packettype_.GetNoArena();
}
inline void clientPacket::set_packettype(const ::std::string& value) {
  
  packettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sendData.clientPacket.packetType)
}
#if LANG_CXX11
inline void clientPacket::set_packettype(::std::string&& value) {
  
  packettype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sendData.clientPacket.packetType)
}
#endif
inline void clientPacket::set_packettype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  packettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sendData.clientPacket.packetType)
}
inline void clientPacket::set_packettype(const char* value, size_t size) {
  
  packettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sendData.clientPacket.packetType)
}
inline ::std::string* clientPacket::mutable_packettype() {
  
  // @@protoc_insertion_point(field_mutable:sendData.clientPacket.packetType)
  return packettype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* clientPacket::release_packettype() {
  // @@protoc_insertion_point(field_release:sendData.clientPacket.packetType)
  
  return packettype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void clientPacket::set_allocated_packettype(::std::string* packettype) {
  if (packettype != NULL) {
    
  } else {
    
  }
  packettype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packettype);
  // @@protoc_insertion_point(field_set_allocated:sendData.clientPacket.packetType)
}

// bytes byteString = 2;
inline void clientPacket::clear_bytestring() {
  bytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& clientPacket::bytestring() const {
  // @@protoc_insertion_point(field_get:sendData.clientPacket.byteString)
  return bytestring_.GetNoArena();
}
inline void clientPacket::set_bytestring(const ::std::string& value) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sendData.clientPacket.byteString)
}
#if LANG_CXX11
inline void clientPacket::set_bytestring(::std::string&& value) {
  
  bytestring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sendData.clientPacket.byteString)
}
#endif
inline void clientPacket::set_bytestring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sendData.clientPacket.byteString)
}
inline void clientPacket::set_bytestring(const void* value, size_t size) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sendData.clientPacket.byteString)
}
inline ::std::string* clientPacket::mutable_bytestring() {
  
  // @@protoc_insertion_point(field_mutable:sendData.clientPacket.byteString)
  return bytestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* clientPacket::release_bytestring() {
  // @@protoc_insertion_point(field_release:sendData.clientPacket.byteString)
  
  return bytestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void clientPacket::set_allocated_bytestring(::std::string* bytestring) {
  if (bytestring != NULL) {
    
  } else {
    
  }
  bytestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytestring);
  // @@protoc_insertion_point(field_set_allocated:sendData.clientPacket.byteString)
}

// int32 sizeOf = 3;
inline void clientPacket::clear_sizeof_() {
  sizeof__ = 0;
}
inline ::google::protobuf::int32 clientPacket::sizeof_() const {
  // @@protoc_insertion_point(field_get:sendData.clientPacket.sizeOf)
  return sizeof__;
}
inline void clientPacket::set_sizeof_(::google::protobuf::int32 value) {
  
  sizeof__ = value;
  // @@protoc_insertion_point(field_set:sendData.clientPacket.sizeOf)
}

// -------------------------------------------------------------------

// serverPacket

// string packetType = 1;
inline void serverPacket::clear_packettype() {
  packettype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& serverPacket::packettype() const {
  // @@protoc_insertion_point(field_get:sendData.serverPacket.packetType)
  return packettype_.GetNoArena();
}
inline void serverPacket::set_packettype(const ::std::string& value) {
  
  packettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sendData.serverPacket.packetType)
}
#if LANG_CXX11
inline void serverPacket::set_packettype(::std::string&& value) {
  
  packettype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sendData.serverPacket.packetType)
}
#endif
inline void serverPacket::set_packettype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  packettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sendData.serverPacket.packetType)
}
inline void serverPacket::set_packettype(const char* value, size_t size) {
  
  packettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sendData.serverPacket.packetType)
}
inline ::std::string* serverPacket::mutable_packettype() {
  
  // @@protoc_insertion_point(field_mutable:sendData.serverPacket.packetType)
  return packettype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* serverPacket::release_packettype() {
  // @@protoc_insertion_point(field_release:sendData.serverPacket.packetType)
  
  return packettype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void serverPacket::set_allocated_packettype(::std::string* packettype) {
  if (packettype != NULL) {
    
  } else {
    
  }
  packettype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), packettype);
  // @@protoc_insertion_point(field_set_allocated:sendData.serverPacket.packetType)
}

// bytes byteString = 2;
inline void serverPacket::clear_bytestring() {
  bytestring_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& serverPacket::bytestring() const {
  // @@protoc_insertion_point(field_get:sendData.serverPacket.byteString)
  return bytestring_.GetNoArena();
}
inline void serverPacket::set_bytestring(const ::std::string& value) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sendData.serverPacket.byteString)
}
#if LANG_CXX11
inline void serverPacket::set_bytestring(::std::string&& value) {
  
  bytestring_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sendData.serverPacket.byteString)
}
#endif
inline void serverPacket::set_bytestring(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sendData.serverPacket.byteString)
}
inline void serverPacket::set_bytestring(const void* value, size_t size) {
  
  bytestring_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sendData.serverPacket.byteString)
}
inline ::std::string* serverPacket::mutable_bytestring() {
  
  // @@protoc_insertion_point(field_mutable:sendData.serverPacket.byteString)
  return bytestring_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* serverPacket::release_bytestring() {
  // @@protoc_insertion_point(field_release:sendData.serverPacket.byteString)
  
  return bytestring_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void serverPacket::set_allocated_bytestring(::std::string* bytestring) {
  if (bytestring != NULL) {
    
  } else {
    
  }
  bytestring_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bytestring);
  // @@protoc_insertion_point(field_set_allocated:sendData.serverPacket.byteString)
}

// int32 singleElementSize = 3;
inline void serverPacket::clear_singleelementsize() {
  singleelementsize_ = 0;
}
inline ::google::protobuf::int32 serverPacket::singleelementsize() const {
  // @@protoc_insertion_point(field_get:sendData.serverPacket.singleElementSize)
  return singleelementsize_;
}
inline void serverPacket::set_singleelementsize(::google::protobuf::int32 value) {
  
  singleelementsize_ = value;
  // @@protoc_insertion_point(field_set:sendData.serverPacket.singleElementSize)
}

// int32 totalSize = 4;
inline void serverPacket::clear_totalsize() {
  totalsize_ = 0;
}
inline ::google::protobuf::int32 serverPacket::totalsize() const {
  // @@protoc_insertion_point(field_get:sendData.serverPacket.totalSize)
  return totalsize_;
}
inline void serverPacket::set_totalsize(::google::protobuf::int32 value) {
  
  totalsize_ = value;
  // @@protoc_insertion_point(field_set:sendData.serverPacket.totalSize)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sendData

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sendData_2eproto
